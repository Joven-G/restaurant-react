// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repositories

import (
	"sync"

	"github.com/jurabek/basket.api/models"
)

var (
	lockBasketRepositoryMockDelete    sync.RWMutex
	lockBasketRepositoryMockGetBasket sync.RWMutex
	lockBasketRepositoryMockUpdate    sync.RWMutex
)

type BasketRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id string) error

	// GetBasketFunc mocks the GetBasket method.
	GetBasketFunc func(customerID string) (*models.CustomerBasket, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(item *models.CustomerBasket) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID string
		}
		// GetBasket holds details about calls to the GetBasket method.
		GetBasket []struct {
			// CustomerID is the customerID argument value.
			CustomerID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Item is the item argument value.
			Item *models.CustomerBasket
		}
	}
}

// Delete calls DeleteFunc.
func (mock *BasketRepositoryMock) Delete(id string) error {
	if mock.DeleteFunc == nil {
		panic("BasketRepositoryMock.DeleteFunc: method is nil but BasketRepository.Delete was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockBasketRepositoryMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockBasketRepositoryMockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedBasketRepository.DeleteCalls())
func (mock *BasketRepositoryMock) DeleteCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockBasketRepositoryMockDelete.RLock()
	calls = mock.calls.Delete
	lockBasketRepositoryMockDelete.RUnlock()
	return calls
}

// GetBasket calls GetBasketFunc.
func (mock *BasketRepositoryMock) GetBasket(customerID string) (*models.CustomerBasket, error) {
	if mock.GetBasketFunc == nil {
		panic("BasketRepositoryMock.GetBasketFunc: method is nil but BasketRepository.GetBasket was just called")
	}
	callInfo := struct {
		CustomerID string
	}{
		CustomerID: customerID,
	}
	lockBasketRepositoryMockGetBasket.Lock()
	mock.calls.GetBasket = append(mock.calls.GetBasket, callInfo)
	lockBasketRepositoryMockGetBasket.Unlock()
	return mock.GetBasketFunc(customerID)
}

// GetBasketCalls gets all the calls that were made to GetBasket.
// Check the length with:
//     len(mockedBasketRepository.GetBasketCalls())
func (mock *BasketRepositoryMock) GetBasketCalls() []struct {
	CustomerID string
} {
	var calls []struct {
		CustomerID string
	}
	lockBasketRepositoryMockGetBasket.RLock()
	calls = mock.calls.GetBasket
	lockBasketRepositoryMockGetBasket.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *BasketRepositoryMock) Update(item *models.CustomerBasket) error {
	if mock.UpdateFunc == nil {
		panic("BasketRepositoryMock.UpdateFunc: method is nil but BasketRepository.Update was just called")
	}
	callInfo := struct {
		Item *models.CustomerBasket
	}{
		Item: item,
	}
	lockBasketRepositoryMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockBasketRepositoryMockUpdate.Unlock()
	return mock.UpdateFunc(item)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedBasketRepository.UpdateCalls())
func (mock *BasketRepositoryMock) UpdateCalls() []struct {
	Item *models.CustomerBasket
} {
	var calls []struct {
		Item *models.CustomerBasket
	}
	lockBasketRepositoryMockUpdate.RLock()
	calls = mock.calls.Update
	lockBasketRepositoryMockUpdate.RUnlock()
	return calls
}
